#!/usr/bin/env bash

set -e

SCRIPT_PATH=$(readlink -f "$0")
USER=vortex
BASE_DIR="$HOME/.pikdum/vortex"
WINE_BUILDS="$BASE_DIR/wine-builds"
VORTEX_INSTALLERS="$BASE_DIR/vortex-installers"
VORTEX_PREFIX="$BASE_DIR/vortex-prefix"

# create required folders
setup() {
    mkdir -p "$WINE_BUILDS" "$VORTEX_INSTALLERS" "$VORTEX_PREFIX"
}

# always create folders
setup

# get asset urls and filenames from recent releases
# params: $1 - github repo, $2 - file extension
select_release() {
    local repo="$1"
    local ext="$2"
    echo "Getting recent $repo releases..." >&2
    local api_url="https://api.github.com/repos/$repo/releases"
    local release_urls=()
    local filenames=()

    # Fetch recent releases JSON data
    local releases_json=$(curl -s "$api_url")

    # Extract the download URLs and filenames for the last 10 releases with the desired extension
    local urls=($(echo "$releases_json" | grep -o "https://.*${ext}" | head -n 10))
    local files=($(echo "$releases_json" | sed -n "s/.*\"name\": \"\([^ ]*${ext}\)\".*/\1/p" | head -n 10))

    # Display a selection menu for the filenames
    PS3="Select a release to download: "
    select file in "${files[@]}"; do
        if [[ -n $file ]]; then
            local index=$(expr $REPLY - 1)
            echo "${urls[index]}"
            break
        else
            echo "Invalid selection, try again." >&2
        fi
    done
}

# download wine
download_wine() {
    cd "$WINE_BUILDS"
    local wine_url="$WINE_URL"
    if [[ -z $wine_url ]]; then
        wine_url=$(select_release "GloriousEggroll/wine-ge-custom" ".tar.xz")
    fi

    if [[ -n $wine_url ]]; then
        local filename="$(basename -- "$wine_url")"
        echo "Downloading $filename into $WINE_BUILDS..."
        curl -# -L "$wine_url" | tar -xJ
    else
        echo "No valid URL selected for wine-ge-custom." >&2
    fi
}

# download vortex
download_vortex() {
    cd "$VORTEX_INSTALLERS"
    local vortex_url="$VORTEX_URL"
    if [[ -z $vortex_url ]]; then
        vortex_url=$(select_release "Nexus-Mods/Vortex" ".exe")
    fi

    if [[ -n $vortex_url ]]; then
        local filename="$(basename -- "$vortex_url")"
        echo "Downloading $filename into $VORTEX_INSTALLERS..."
        rm -f ./*
        curl -# -OJL "$vortex_url"
    else
        echo "No valid URL selected for Vortex." >&2
    fi
}

# download the latest vortexgames.txt mapping
# used to find which games map to which proton prefixes
download_mapping() {
    cd "$BASE_DIR"
    echo "Downloading vortexgames.txt mapping..." >&2
    curl -# -OJL "https://raw.githubusercontent.com/sonic2kk/steamtinkerlaunch/master/misc/vortexgames.txt"
}

# create vortex's wineprefix
setup_wineprefix() {
    echo "Setting up WINEPREFIX: $VORTEX_PREFIX..." >&2

    WINE_BUILD="$WINE_BUILDS/$(get_wine_build)"
    trap '$WINE_BUILD/bin/wineserver --kill' EXIT

    WINEDLLOVERRIDES="mscoree,mshtml=" WINEPREFIX="$VORTEX_PREFIX" "$WINE_BUILD/bin/wineboot" --init
    WINEPREFIX="$VORTEX_PREFIX" "$WINE_BUILD/bin/wineserver" --wait

    # remove symlinks, because why are they even there
    for item in "$VORTEX_PREFIX/drive_c/users/vortex"/*; do
    if [ -h "$item" ]; then
        rm "$item"
        mkdir "$item"
    fi
    done
}

# mount some steam game folders as windows drives
setup_drives() {
    echo "Setting up drives..."
    cd "$VORTEX_PREFIX/dosdevices"
    ln -s $HOME/.steam/steam/steamapps/common/ d: || true
    # TODO: set up steam deck sd card
}

# select item from folder
# params: $1 - folder, $2 - prompt
select_from_folder() {
    local directory="$1"
    local prompt="$2"
    local options=()

    for option in "$directory"/*; do
        options+=("$(basename "$option")")
    done

    if [[ ${#options[@]} -eq 1 ]]; then
        echo "${options[0]}"
        return
    fi

    PS3="$prompt"
    select dir in "${options[@]}"; do
        if [[ -n $dir ]]; then
            echo "$dir"
            return
        else
            echo "Invalid selection, try again." >&2
        fi
    done
}

# select an installed game
select_game_id() {
    local compatdata_dir="$HOME/.steam/steam/steamapps/compatdata"
    local vortexgames_file="$BASE_DIR/vortexgames.txt"

    # Get a list of all game IDs from subfolders in $compatdata_dir
    local game_ids=()
    for folder in "$compatdata_dir"/*; do
        if [[ -d "$folder" ]]; then
            game_ids+=("$(basename "$folder")")
        fi
    done

    # Filter out lines from vortexgames.txt that don't have subfolders
    local filtered_lines=()
    while IFS=';' read -r slug name id; do
        id="${id//\"/}"  # Remove quotes from game ID
        name="${name//\"/}"  # Remove quotes from game name
        if [[ "${game_ids[*]}" =~ (^|[[:space:]])$id($|[[:space:]]) ]]; then
            filtered_lines+=("$name [$id]")
        fi
    done < "$vortexgames_file"


    # Show a bash select menu with game options
    PS3="Select a game: "
    select option in "${filtered_lines[@]}"; do
        if [[ -n $option ]]; then
            # Extract the game ID from the selected option
            local game_id="${option##*[}"
            game_id="${game_id%]}"
            echo "$game_id"
            return
        else
            echo "Invalid selection, try again."
        fi
    done
}

# add a .desktop entry to ~/.local/share/applications/
# can use this for opening nxm:// links
install_desktop_entry() {
    echo "Downloading icon..." >&2
    rm -f "$BASE_DIR/vortex.ico"
    curl -# -JL -o "$BASE_DIR/vortex.ico" "https://raw.githubusercontent.com/pikdum/vortex-linux/master/assets/vortex.ico"

    echo "Creating .desktop entry..."
cat <<EOF > "$HOME/.local/share/applications/vortex-linux.desktop"
[Desktop Entry]
Type=Application
Categories=Game;Utility
Name=Vortex
MimeType=x-scheme-handler/nxm;x-scheme-handler/nxm-protocol
Terminal=false
X-KeepTerminal=false
Path=$HOME/.pikdum/vortex/vortex-prefix/drive_c/Program Files/Black Tree Gaming Ltd/Vortex
Exec=$SCRIPT_PATH start -d %u
Icon=$HOME/.pikdum/vortex/vortex.ico
EOF
    gtk-update-icon-cache || true
}

# run vortex setup exe
install_vortex() {
    echo "Installing Vortex..." >&2

    WINE_BUILD="$WINE_BUILDS/$(get_wine_build)"
    trap '$WINE_BUILD/bin/wineserver --kill' EXIT

    local vortex_exe="$VORTEX_INSTALLERS/$(select_from_folder "$VORTEX_INSTALLERS" "Choose a Vortex version: ")"

    install_desktop_entry
    WINEPREFIX="$VORTEX_PREFIX" "$WINE_BUILD/bin/wine" "$vortex_exe"
    WINEPREFIX="$VORTEX_PREFIX" "$WINE_BUILD/bin/wineserver" --wait
}

# start vortex
start_vortex() {
    echo "Starting Vortex..." >&2

    WINE_BUILD="$WINE_BUILDS/$(get_wine_build)"

    if [ "$1" = "-d" ] || [ "$1" = "-i" ]; then
        if [ -n "$2" ]; then
            # url supplied, so pass arguments to vortex
            WINEPREFIX="$VORTEX_PREFIX" "$WINE_BUILD/bin/wine" "$VORTEX_PREFIX/drive_c/Program Files/Black Tree Gaming Ltd/Vortex/Vortex.exe" "$@"
        else
            # no url supplied, so do not pass arguments
            # this so so we can always have a trailing -i or -d in the .desktop file, without errors
            WINEPREFIX="$VORTEX_PREFIX" "$WINE_BUILD/bin/wine" "$VORTEX_PREFIX/drive_c/Program Files/Black Tree Gaming Ltd/Vortex/Vortex.exe"
        fi
    else
        # not install, so pass args
        WINEPREFIX="$VORTEX_PREFIX" "$WINE_BUILD/bin/wine" "$VORTEX_PREFIX/drive_c/Program Files/Black Tree Gaming Ltd/Vortex/Vortex.exe" "$@"
    fi

}


# Get the stored Wine build from ~/.pikdum/vortex/WINE_BUILD or prompt for selection if it doesn't exist
get_wine_build() {
    if [ -f "$BASE_DIR/WINE_BUILD" ]; then
        cat "$BASE_DIR/WINE_BUILD"
    else
        set_wine_build
        cat "$BASE_DIR/WINE_BUILD"
    fi
}

# begin of more important commands

# Set the selected Wine build and store it in ~/.pikdum/vortex/WINE_BUILD
set_wine_build() {
    local selected_build="$(select_from_folder "$WINE_BUILDS" "Choose a Wine build to use: ")"
    echo "$selected_build" > "$BASE_DIR/WINE_BUILD"
    cat "$BASE_DIR/WINE_BUILD"
}

# set up dependencies + install vortex
install() {
    download_wine
    download_vortex
    download_mapping
    setup_wineprefix
    setup_drives
    install_vortex
}

# uninstall this tool
uninstall() {
    rm -rf "$BASE_DIR"
    rm -rf "$HOME/.local/share/applications/vortex-linux.desktop"
    echo "Vortex uninstalled." &>2
}

# start vortex
start() {
    start_vortex "$@"
}

# pull new wine and vortex versions
# and game mappings
update() {
    echo "Grabbing new releases..."
    download_wine
    download_mapping
    set_wine_build
}

# this will go through the target game's home directory, recursively,
# and symlink folders to vortex's home directory
# this is mostly to support bethesda games,
# since they keep loadorder.txt and plugins.txt in appdata
# but might be flexible enough for others that do similar
symlink() {
    echo "Symlinking target game's home subfolders to Vortex..."
    local game_id="$(select_game_id)"
    local compatdata_dir="$HOME/.steam/steam/steamapps/compatdata"
    local src_dir="$compatdata_dir/$game_id/pfx/drive_c/users/steamuser"
    local dest_dir="$VORTEX_PREFIX/drive_c/users/vortex"

    # Check if the source directory exists
    if [ ! -d "$src_dir" ]; then
        echo "Source directory not found: $src_dir" >&2
        exit 1
    fi

    # Check if the destination directory exists
    if [ ! -d "$dest_dir" ]; then
        echo "Destination directory not found: $dest_dir" >&2
        exit 1
    fi

    files=$(find "$src_dir" -mindepth 1 -type d | sort -ur)

    # Loop through the files and attempt to create symlinks from source to destination
    while IFS= read -r file; do
        # Remove the source directory prefix from the file path
        relative_path="${file#$src_dir/}"

        # Create a symlink from source to destination, preserving the file path structure
        if ln -sT "$file" "$dest_dir/$relative_path" >/dev/null 2>&1; then
            echo "Symlink created: $dest_dir/$relative_path"
        fi
    done <<< "$files"
}

# show help
help() {
    echo "Usage: ./vortex-linux [command]"
    echo "Commands:"
    echo "  install         Set up dependencies and install Vortex"
    echo "  start           Start Vortex"
    echo "  update          Update Wine and game mappings"
    echo "  uninstall       Uninstall Vortex"
    echo "  symlink         Symlink target game's home subfolders to Vortex"
    echo "  set_wine_build  Change Wine build"
}

if declare -f "$1" >/dev/null; then
    "$@"
    exit 0
else
    help
    exit 1
fi
